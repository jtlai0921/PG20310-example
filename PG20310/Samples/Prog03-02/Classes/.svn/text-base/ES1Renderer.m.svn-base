//
//  ES1Renderer.m
//  Prog03-02
//
//  Created by SAKAI Yuji on 09/10/19.
//  Copyright __MyCompanyName__ 2009. All rights reserved.
//

#import "ES1Renderer.h"
#import "glu.h"

@implementation ES1Renderer

// Create an ES 1.1 context
- (id) init
{
	if (self = [super init])
	{
		context = [[EAGLContext alloc] initWithAPI:kEAGLRenderingAPIOpenGLES1];
        
        if (!context || ![EAGLContext setCurrentContext:context])
		{
            [self release];
            return nil;
        }
		
		// Create default framebuffer object. The backing will be allocated for the current layer in -resizeFromLayer
		glGenFramebuffersOES(1, &defaultFramebuffer);
		glGenRenderbuffersOES(1, &colorRenderbuffer);
		glBindFramebufferOES(GL_FRAMEBUFFER_OES, defaultFramebuffer);
		glBindRenderbufferOES(GL_RENDERBUFFER_OES, colorRenderbuffer);
		glFramebufferRenderbufferOES(GL_FRAMEBUFFER_OES, GL_COLOR_ATTACHMENT0_OES, GL_RENDERBUFFER_OES, colorRenderbuffer);
		
#if (USE_DEPTH_BUFFER)
		glGenRenderbuffersOES(1, &depthRenderbuffer);
		glBindRenderbufferOES(GL_RENDERBUFFER_OES, depthRenderbuffer);
		glFramebufferRenderbufferOES(GL_FRAMEBUFFER_OES, GL_DEPTH_ATTACHMENT_OES, GL_RENDERBUFFER_OES, depthRenderbuffer);
#endif
	}
	
	return self;
}

- (void) render
{
    // Replace the implementation of this method to do your own custom drawing
	const GLfloat lightAmbient[] = { 0.2f, 0.2f, 0.2f, 1.0f };
	const GLfloat lightDiffuse[] = { 0.8f, 0.8f, 0.8f, 1.0f };
	const GLfloat lightSpecular[] = { 1.0f, 1.0f, 1.0f, 1.0f };
	const GLfloat lightPosition[] = { 0.0f, 2.0f, 0.0f, 1.0f };
	const GLfloat lightSpotDirection[] = { 0.0f, -1.0f, 0.0f };
	const GLfloat lightSpotExponent = 3.0f;
	const GLfloat lightSpotCutoff = 30.0f;

	const GLfloat cubeAmbient[] = { 0.2f, 0.2f, 0.2f, 1.0f };
	const GLfloat cubeMaterial[] = { 1.0f, 1.0f, 0.0f, 1.0f };
	const GLfloat cubeSpecular[] = { 1.0f, 1.0f, 1.0f, 1.0f };
	const GLfloat cubeShiness[] = { 32.0f };
	
    const GLfloat cubeVertices[] = {
		// 上面
		-0.5f,  0.5f,  0.5f,
		 0.5f,  0.5f,  0.5f,
		 0.5f,  0.5f, -0.5f,
		-0.5f,  0.5f,  0.5f,
		 0.5f,  0.5f, -0.5f,
		-0.5f,  0.5f, -0.5f,
		// 前面
		-0.5f,  0.5f, -0.5f,
		 0.5f,  0.5f, -0.5f,
		 0.5f, -0.5f, -0.5f,
		-0.5f,  0.5f, -0.5f,
		 0.5f, -0.5f, -0.5f,
		-0.5f, -0.5f, -0.5f,
		// 下面
		-0.5f, -0.5f, -0.5f,
		 0.5f, -0.5f, -0.5f,
		 0.5f, -0.5f,  0.5f,
		-0.5f, -0.5f, -0.5f,
		 0.5f, -0.5f,  0.5f,
		-0.5f, -0.5f,  0.5f,
		// 背面
		-0.5f, -0.5f,  0.5f,
		 0.5f, -0.5f,  0.5f,
		 0.5f,  0.5f,  0.5f,
		-0.5f, -0.5f,  0.5f,
		 0.5f,  0.5f,  0.5f,
		-0.5f,  0.5f,  0.5f,
		// 右面
		-0.5f,  0.5f,  0.5f,
		-0.5f,  0.5f, -0.5f,
		-0.5f, -0.5f, -0.5f,
		-0.5f,  0.5f,  0.5f,
		-0.5f, -0.5f, -0.5f,
		-0.5f, -0.5f,  0.5f,
		// 左面
		 0.5f,  0.5f, -0.5f,
		 0.5f,  0.5f,  0.5f,
		 0.5f, -0.5f,  0.5f,
		 0.5f,  0.5f, -0.5f,
		 0.5f, -0.5f,  0.5f,
		 0.5f, -0.5f, -0.5f,
	};
	const GLfloat cubeNormals[] = {
		// 上面
		 0.0f, 1.0f, 0.0f,
		 0.0f, 1.0f, 0.0f,
		 0.0f, 1.0f, 0.0f,
		 0.0f, 1.0f, 0.0f,
		 0.0f, 1.0f, 0.0f,
		 0.0f, 1.0f, 0.0f,
		// 前面
		 0.0f, 0.0f, -1.0f,
		 0.0f, 0.0f, -1.0f,
		 0.0f, 0.0f, -1.0f,
		 0.0f, 0.0f, -1.0f,
		 0.0f, 0.0f, -1.0f,
		 0.0f, 0.0f, -1.0f,
		// 下面
		 0.0f, -1.0f, 0.0f,
		 0.0f, -1.0f, 0.0f,
		 0.0f, -1.0f, 0.0f,
		 0.0f, -1.0f, 0.0f,
		 0.0f, -1.0f, 0.0f,
		 0.0f, -1.0f, 0.0f,
		// 背面
		 0.0f, 0.0f, 1.0f,
		 0.0f, 0.0f, 1.0f,
		 0.0f, 0.0f, 1.0f,
		 0.0f, 0.0f, 1.0f,
		 0.0f, 0.0f, 1.0f,
		 0.0f, 0.0f, 1.0f,
		// 右面
		-1.0f, 0.0f, 0.0f,
		-1.0f, 0.0f, 0.0f,
		-1.0f, 0.0f, 0.0f,
		-1.0f, 0.0f, 0.0f,
		-1.0f, 0.0f, 0.0f,
		-1.0f, 0.0f, 0.0f,
		// 左面
		 1.0f, 0.0f, 0.0f,
		 1.0f, 0.0f, 0.0f,
		 1.0f, 0.0f, 0.0f,
		 1.0f, 0.0f, 0.0f,
		 1.0f, 0.0f, 0.0f,
		 1.0f, 0.0f, 0.0f,
	};
    
	// This application only creates a single context which is already set current at this point.
	// This call is redundant, but needed if dealing with multiple contexts.
    [EAGLContext setCurrentContext:context];
    
	// This application only creates a single default framebuffer which is already bound at this point.
	// This call is redundant, but needed if dealing with multiple framebuffers.
    glBindFramebufferOES(GL_FRAMEBUFFER_OES, defaultFramebuffer);
    glViewport(0, 0, backingWidth, backingHeight);
	
#if (USE_DEPTH_BUFFER)
	glEnable(GL_DEPTH_TEST);
#endif
	
	glEnable(GL_LIGHTING);
	glEnable(GL_LIGHT0);
	glLightfv(GL_LIGHT0, GL_AMBIENT, lightAmbient);
	glLightfv(GL_LIGHT0, GL_DIFFUSE, lightDiffuse);
	glLightfv(GL_LIGHT0, GL_SPECULAR, lightSpecular);
	glLightfv(GL_LIGHT0, GL_POSITION, lightPosition);
	glLightfv(GL_LIGHT0, GL_SPOT_DIRECTION, lightSpotDirection);
	glLightf(GL_LIGHT0, GL_SPOT_EXPONENT, lightSpotExponent);
	glLightf(GL_LIGHT0, GL_SPOT_CUTOFF, lightSpotCutoff);
	
	glEnable(GL_NORMALIZE);
	
    glClearColor(0.5f, 0.5f, 0.5f, 1.0f);
#if (USE_DEPTH_BUFFER)
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
#else
	glClear(GL_COLOR_BUFFER_BIT);
#endif
	
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
	gluPerspective(60.0, 320.0/480.0, 1.0, 100.0);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
	gluLookAt(0.0, 0.0, -7.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0);
	
    glVertexPointer(3, GL_FLOAT, 0, cubeVertices);
    glEnableClientState(GL_VERTEX_ARRAY);
    glNormalPointer(GL_FLOAT, 0, cubeNormals);
    glEnableClientState(GL_NORMAL_ARRAY);

	static GLfloat cubeRot = 0.0f;

	glMaterialfv(GL_FRONT_AND_BACK, GL_AMBIENT, cubeAmbient);
	glMaterialfv(GL_FRONT_AND_BACK, GL_DIFFUSE, cubeMaterial);
	glMaterialfv(GL_FRONT_AND_BACK, GL_SPECULAR, cubeSpecular);
	glMaterialfv(GL_FRONT_AND_BACK, GL_SHININESS, cubeShiness);

	glPushMatrix();
	{
		glTranslatef(2.0f, 0.0f, 0.0f);
		glPushMatrix();
		{
			glTranslatef(0.0f, 2.0f, 0.0f);
			glRotatef(cubeRot, 1.0f, 1.0f, 1.0f);
			glScalef(0.3f, 0.3f, 0.3f);
			glDrawArrays(GL_TRIANGLES, 0, 12*3);
		}
		glPopMatrix();
		glPushMatrix();
		{
			glTranslatef(0.0f, 1.0f, 0.0f);
			glRotatef(cubeRot, 1.0f, 1.0f, 1.0f);
			glScalef(0.3f, 0.3f, 0.3f);
			glDrawArrays(GL_TRIANGLES, 0, 12*3);
		}
		glPopMatrix();
		glPushMatrix();
		{
			glTranslatef(0.0f, 0.0f, 0.0f);
			glRotatef(cubeRot, 1.0f, 1.0f, 1.0f);
			glScalef(0.3f, 0.3f, 0.3f);
			glDrawArrays(GL_TRIANGLES, 0, 12*3);
		}
		glPopMatrix();
		glPushMatrix();
		{
			glTranslatef(0.0f, -1.0f, 0.0f);
			glRotatef(cubeRot, 1.0f, 1.0f, 1.0f);
			glScalef(0.3f, 0.3f, 0.3f);
			glDrawArrays(GL_TRIANGLES, 0, 12*3);
		}
		glPopMatrix();
		glPushMatrix();
		{
			glTranslatef(0.0f, -2.0f, 0.0f);
			glRotatef(cubeRot, 1.0f, 1.0f, 1.0f);
			glScalef(0.3f, 0.3f, 0.3f);
			glDrawArrays(GL_TRIANGLES, 0, 12*3);
		}
		glPopMatrix();
	}
	glPopMatrix();
	glPushMatrix();
	{
		glTranslatef(1.0f, 0.0f, 0.0f);
		glPushMatrix();
		{
			glTranslatef(0.0f, 2.0f, 0.0f);
			glRotatef(cubeRot, 1.0f, 1.0f, 1.0f);
			glScalef(0.3f, 0.3f, 0.3f);
			glDrawArrays(GL_TRIANGLES, 0, 12*3);
		}
		glPopMatrix();
		glPushMatrix();
		{
			glTranslatef(0.0f, 1.0f, 0.0f);
			glRotatef(cubeRot, 1.0f, 1.0f, 1.0f);
			glScalef(0.3f, 0.3f, 0.3f);
			glDrawArrays(GL_TRIANGLES, 0, 12*3);
		}
		glPopMatrix();
		glPushMatrix();
		{
			glTranslatef(0.0f, 0.0f, 0.0f);
			glRotatef(cubeRot, 1.0f, 1.0f, 1.0f);
			glScalef(0.3f, 0.3f, 0.3f);
			glDrawArrays(GL_TRIANGLES, 0, 12*3);
		}
		glPopMatrix();
		glPushMatrix();
		{
			glTranslatef(0.0f, -1.0f, 0.0f);
			glRotatef(cubeRot, 1.0f, 1.0f, 1.0f);
			glScalef(0.3f, 0.3f, 0.3f);
			glDrawArrays(GL_TRIANGLES, 0, 12*3);
		}
		glPopMatrix();
		glPushMatrix();
		{
			glTranslatef(0.0f, -2.0f, 0.0f);
			glRotatef(cubeRot, 1.0f, 1.0f, 1.0f);
			glScalef(0.3f, 0.3f, 0.3f);
			glDrawArrays(GL_TRIANGLES, 0, 12*3);
		}
		glPopMatrix();
	}
	glPopMatrix();
	glPushMatrix();
	{
		glTranslatef(0.0f, 0.0f, 0.0f);
		glPushMatrix();
		{
			glTranslatef(0.0f, 2.0f, 0.0f);
			glRotatef(cubeRot, 1.0f, 1.0f, 1.0f);
			glScalef(0.3f, 0.3f, 0.3f);
			glDrawArrays(GL_TRIANGLES, 0, 12*3);
		}
		glPopMatrix();
		glPushMatrix();
		{
			glTranslatef(0.0f, 1.0f, 0.0f);
			glRotatef(cubeRot, 1.0f, 1.0f, 1.0f);
			glScalef(0.3f, 0.3f, 0.3f);
			glDrawArrays(GL_TRIANGLES, 0, 12*3);
		}
		glPopMatrix();
		glPushMatrix();
		{
			glTranslatef(0.0f, 0.0f, 0.0f);
			glRotatef(cubeRot, 1.0f, 1.0f, 1.0f);
			glScalef(0.3f, 0.3f, 0.3f);
			glDrawArrays(GL_TRIANGLES, 0, 12*3);
		}
		glPopMatrix();
		glPushMatrix();
		{
			glTranslatef(0.0f, -1.0f, 0.0f);
			glRotatef(cubeRot, 1.0f, 1.0f, 1.0f);
			glScalef(0.3f, 0.3f, 0.3f);
			glDrawArrays(GL_TRIANGLES, 0, 12*3);
		}
		glPopMatrix();
		glPushMatrix();
		{
			glTranslatef(0.0f, -2.0f, 0.0f);
			glRotatef(cubeRot, 1.0f, 1.0f, 1.0f);
			glScalef(0.3f, 0.3f, 0.3f);
			glDrawArrays(GL_TRIANGLES, 0, 12*3);
		}
		glPopMatrix();
	}
	glPopMatrix();
	glPushMatrix();
	{
		glTranslatef(-1.0f, 0.0f, 0.0f);
		glPushMatrix();
		{
			glTranslatef(0.0f, 2.0f, 0.0f);
			glRotatef(cubeRot, 1.0f, 1.0f, 1.0f);
			glScalef(0.3f, 0.3f, 0.3f);
			glDrawArrays(GL_TRIANGLES, 0, 12*3);
		}
		glPopMatrix();
		glPushMatrix();
		{
			glTranslatef(0.0f, 1.0f, 0.0f);
			glRotatef(cubeRot, 1.0f, 1.0f, 1.0f);
			glScalef(0.3f, 0.3f, 0.3f);
			glDrawArrays(GL_TRIANGLES, 0, 12*3);
		}
		glPopMatrix();
		glPushMatrix();
		{
			glTranslatef(0.0f, 0.0f, 0.0f);
			glRotatef(cubeRot, 1.0f, 1.0f, 1.0f);
			glScalef(0.3f, 0.3f, 0.3f);
			glDrawArrays(GL_TRIANGLES, 0, 12*3);
		}
		glPopMatrix();
		glPushMatrix();
		{
			glTranslatef(0.0f, -1.0f, 0.0f);
			glRotatef(cubeRot, 1.0f, 1.0f, 1.0f);
			glScalef(0.3f, 0.3f, 0.3f);
			glDrawArrays(GL_TRIANGLES, 0, 12*3);
		}
		glPopMatrix();
		glPushMatrix();
		{
			glTranslatef(0.0f, -2.0f, 0.0f);
			glRotatef(cubeRot, 1.0f, 1.0f, 1.0f);
			glScalef(0.3f, 0.3f, 0.3f);
			glDrawArrays(GL_TRIANGLES, 0, 12*3);
		}
		glPopMatrix();
	}
	glPopMatrix();
	glPushMatrix();
	{
		glTranslatef(-2.0f, 0.0f, 0.0f);
		glPushMatrix();
		{
			glTranslatef(0.0f, 2.0f, 0.0f);
			glRotatef(cubeRot, 1.0f, 1.0f, 1.0f);
			glScalef(0.3f, 0.3f, 0.3f);
			glDrawArrays(GL_TRIANGLES, 0, 12*3);
		}
		glPopMatrix();
		glPushMatrix();
		{
			glTranslatef(0.0f, 1.0f, 0.0f);
			glRotatef(cubeRot, 1.0f, 1.0f, 1.0f);
			glScalef(0.3f, 0.3f, 0.3f);
			glDrawArrays(GL_TRIANGLES, 0, 12*3);
		}
		glPopMatrix();
		glPushMatrix();
		{
			glTranslatef(0.0f, 0.0f, 0.0f);
			glRotatef(cubeRot, 1.0f, 1.0f, 1.0f);
			glScalef(0.3f, 0.3f, 0.3f);
			glDrawArrays(GL_TRIANGLES, 0, 12*3);
		}
		glPopMatrix();
		glPushMatrix();
		{
			glTranslatef(0.0f, -1.0f, 0.0f);
			glRotatef(cubeRot, 1.0f, 1.0f, 1.0f);
			glScalef(0.3f, 0.3f, 0.3f);
			glDrawArrays(GL_TRIANGLES, 0, 12*3);
		}
		glPopMatrix();
		glPushMatrix();
		{
			glTranslatef(0.0f, -2.0f, 0.0f);
			glRotatef(cubeRot, 1.0f, 1.0f, 1.0f);
			glScalef(0.3f, 0.3f, 0.3f);
			glDrawArrays(GL_TRIANGLES, 0, 12*3);
		}
		glPopMatrix();
	}
	glPopMatrix();
#if 0
	glPushMatrix();
	{
		glTranslatef(0.0f, 10.0f, 50.0f);
		glRotatef(cubeRot, 1.0f, 1.0f, 1.0f);
		glScalef(0.5f, 0.5f, 0.5f);
		glDrawArrays(GL_TRIANGLES, 0, 12*3);
	}
	glPopMatrix();
	glPushMatrix();
	{
		glTranslatef(0.0f, -10.0f, 50.0f);
		glRotatef(cubeRot, 1.0f, 1.0f, 1.0f);
		glScalef(0.5f, 0.5f, 0.5f);
		glDrawArrays(GL_TRIANGLES, 0, 12*3);
	}
	glPopMatrix();
#endif
	cubeRot += 1.0f;
	if (cubeRot >= 360.0f) {
		cubeRot -= 360.0f;
	}

	// This application only creates a single color renderbuffer which is already bound at this point.
	// This call is redundant, but needed if dealing with multiple renderbuffers.
    glBindRenderbufferOES(GL_RENDERBUFFER_OES, colorRenderbuffer);
    [context presentRenderbuffer:GL_RENDERBUFFER_OES];
}

- (BOOL) resizeFromLayer:(CAEAGLLayer *)layer
{	
	// Allocate color buffer backing based on the current layer size
    glBindRenderbufferOES(GL_RENDERBUFFER_OES, colorRenderbuffer);
    [context renderbufferStorage:GL_RENDERBUFFER_OES fromDrawable:layer];
	glGetRenderbufferParameterivOES(GL_RENDERBUFFER_OES, GL_RENDERBUFFER_WIDTH_OES, &backingWidth);
    glGetRenderbufferParameterivOES(GL_RENDERBUFFER_OES, GL_RENDERBUFFER_HEIGHT_OES, &backingHeight);
	
#if (USE_DEPTH_BUFFER)
	glBindRenderbufferOES(GL_RENDERBUFFER_OES, depthRenderbuffer);
	glRenderbufferStorageOES(GL_RENDERBUFFER_OES, GL_DEPTH_COMPONENT16_OES, backingWidth, backingHeight);
#endif
	
    if (glCheckFramebufferStatusOES(GL_FRAMEBUFFER_OES) != GL_FRAMEBUFFER_COMPLETE_OES)
	{
		NSLog(@"Failed to make complete framebuffer object %x", glCheckFramebufferStatusOES(GL_FRAMEBUFFER_OES));
        return NO;
    }
    
    return YES;
}

- (void) dealloc
{
	// Tear down GL
	if (defaultFramebuffer)
	{
		glDeleteFramebuffersOES(1, &defaultFramebuffer);
		defaultFramebuffer = 0;
	}

	if (colorRenderbuffer)
	{
		glDeleteRenderbuffersOES(1, &colorRenderbuffer);
		colorRenderbuffer = 0;
	}
	
#if (USE_DEPTH_BUFFER)
    if(depthRenderbuffer) {
        glDeleteRenderbuffersOES(1, &depthRenderbuffer);
        depthRenderbuffer = 0;
    }
#endif
	
	// Tear down context
	if ([EAGLContext currentContext] == context)
        [EAGLContext setCurrentContext:nil];
	
	[context release];
	context = nil;
	
	[super dealloc];
}

@end
